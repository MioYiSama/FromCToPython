=== 长度

使用`len()`函数获取长度。

=== 遍历

均可以使用`for`循环遍历，比如：

#rect[
  ```py
  a = [1, 2, 3]
  for x in a:
    print(x)
  ```
]

=== 索引/下标

和C语言类似，访问序列中的元素，需要借助#quote[索引/下标]（Index）。
其中，字符串、区间、列表、元组的索引均为*整数*。集合*不能*通过索引访问元素。字典的索引为键值对的*键*。

与C语言不同，Python的整数索引可以为*负数*。负数的含义就是从最后一个元素开始往前数。比如：

#rect[
  ```py
  s = 'Hello'
  s[-1] # 最后一个字符，即o
  s[-3] # 倒数第三个字符，即l
  ```
]

=== 切片

（注：只有下标为整数的序列支持切片）

#quote[*切片*]（Slice）指*截取*序列中的多个元素。
比如，假设`s = "abcde"`，那么`s[1:3]`就表示从索引1开始，直到索引3（不含）的所有元素，即`"bc"`。
其中开始索引和结束索引均可以省略，默认值分别为序列的第一个索引和最后一个索引。
切片的索引也可以使用负整数。

切片还支持第三个参数——步长，其表示索引每次的变化量。
比如`[0:10:2]`就表示索引为`0, 2, 4, 6, 8`的元素组合成的切片。
步长也可以是负数，但此时开始索引和结束索引需要交换位置。
步长的默认值为1。

对于列表来说，还可以借助切片来修改列表。比如，假设`a=[1, 2, 3, 4, 5]`，那么`a[1:3] = [5, 6, 7]`就会让`a`变成`[1, 5, 6, 7, 4, 5]`。

需要注意的是，切片会创建一个新的序列，因此修改切片不会对原序列产生影响。
